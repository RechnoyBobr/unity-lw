//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Field/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Field/Input/GameInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @GameInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""KeyboardAction"",
            ""id"": ""f3fb59d3-4600-46b3-bed7-acc45518a895"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""30ce5c8c-2292-4cea-a8b7-0efaff4d79b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""e80421bd-fd99-4f90-b421-b1f3058a94a5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""32636188-cf4e-4ea3-808f-a0a0446be671"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""c38c47e2-76b5-4467-b754-a22fb92cda75"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81585ec7-aef9-445f-87b5-8b7145795773"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0b0934c-df12-4378-b007-0fe7acde2893"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1f8ce0d-7714-4bc5-baac-d385d5eadd2f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0065ee64-1865-4949-8ae7-32a07f026201"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8bded38-e1d7-4c18-967d-35eb4a3b2adb"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""169efd63-eaeb-46d4-a622-812ea69e6217"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8871ef83-9fa6-4754-8d59-9fb0d89a773e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c280f8e5-a6ec-4f0b-b4c6-d804a23f1040"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b08a3c51-c6b0-4541-ab9c-e1da74a5fe61"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SwipeAction"",
            ""id"": ""cc574b76-3888-4a04-a80e-91151b02f567"",
            ""actions"": [
                {
                    ""name"": ""MoveWithTouchScreen"",
                    ""type"": ""Value"",
                    ""id"": ""54a17148-1281-487a-87c7-d70c5fa0c16d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveWithMouse"",
                    ""type"": ""Value"",
                    ""id"": ""18f0a2a4-bfcd-4f24-9896-aab706ec4f47"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""MouseDrag"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f597afe3-9d56-4e9d-9415-3d03089f359f"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveWithTouchScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Mouse Drag"",
                    ""id"": ""1e7159f7-a513-48e0-b1ba-0b64cd3f55d8"",
                    ""path"": ""MouseDrag"",
                    ""interactions"": ""MouseDrag"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveWithMouse"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Button"",
                    ""id"": ""81cbf107-68a0-4c9f-85a1-a29395b275d1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveWithMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis1"",
                    ""id"": ""ac544690-906a-4de9-990d-a9c0b9eb4bc3"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveWithMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis2"",
                    ""id"": ""b35fba8a-f238-4607-b80a-e25e2e2a92b8"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveWithMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyboardAction
        m_KeyboardAction = asset.FindActionMap("KeyboardAction", throwIfNotFound: true);
        m_KeyboardAction_MoveUp = m_KeyboardAction.FindAction("MoveUp", throwIfNotFound: true);
        m_KeyboardAction_MoveDown = m_KeyboardAction.FindAction("MoveDown", throwIfNotFound: true);
        m_KeyboardAction_MoveLeft = m_KeyboardAction.FindAction("MoveLeft", throwIfNotFound: true);
        m_KeyboardAction_MoveRight = m_KeyboardAction.FindAction("MoveRight", throwIfNotFound: true);
        // SwipeAction
        m_SwipeAction = asset.FindActionMap("SwipeAction", throwIfNotFound: true);
        m_SwipeAction_MoveWithTouchScreen = m_SwipeAction.FindAction("MoveWithTouchScreen", throwIfNotFound: true);
        m_SwipeAction_MoveWithMouse = m_SwipeAction.FindAction("MoveWithMouse", throwIfNotFound: true);
    }

    ~@GameInput()
    {
        UnityEngine.Debug.Assert(!m_KeyboardAction.enabled, "This will cause a leak and performance issues, GameInput.KeyboardAction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SwipeAction.enabled, "This will cause a leak and performance issues, GameInput.SwipeAction.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardAction
    private readonly InputActionMap m_KeyboardAction;
    private List<IKeyboardActionActions> m_KeyboardActionActionsCallbackInterfaces = new List<IKeyboardActionActions>();
    private readonly InputAction m_KeyboardAction_MoveUp;
    private readonly InputAction m_KeyboardAction_MoveDown;
    private readonly InputAction m_KeyboardAction_MoveLeft;
    private readonly InputAction m_KeyboardAction_MoveRight;
    /// <summary>
    /// Provides access to input actions defined in input action map "KeyboardAction".
    /// </summary>
    public struct KeyboardActionActions
    {
        private @GameInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public KeyboardActionActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "KeyboardAction/MoveUp".
        /// </summary>
        public InputAction @MoveUp => m_Wrapper.m_KeyboardAction_MoveUp;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardAction/MoveDown".
        /// </summary>
        public InputAction @MoveDown => m_Wrapper.m_KeyboardAction_MoveDown;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardAction/MoveLeft".
        /// </summary>
        public InputAction @MoveLeft => m_Wrapper.m_KeyboardAction_MoveLeft;
        /// <summary>
        /// Provides access to the underlying input action "KeyboardAction/MoveRight".
        /// </summary>
        public InputAction @MoveRight => m_Wrapper.m_KeyboardAction_MoveRight;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_KeyboardAction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="KeyboardActionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(KeyboardActionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="KeyboardActionActions" />
        public void AddCallbacks(IKeyboardActionActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionActionsCallbackInterfaces.Add(instance);
            @MoveUp.started += instance.OnMoveUp;
            @MoveUp.performed += instance.OnMoveUp;
            @MoveUp.canceled += instance.OnMoveUp;
            @MoveDown.started += instance.OnMoveDown;
            @MoveDown.performed += instance.OnMoveDown;
            @MoveDown.canceled += instance.OnMoveDown;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="KeyboardActionActions" />
        private void UnregisterCallbacks(IKeyboardActionActions instance)
        {
            @MoveUp.started -= instance.OnMoveUp;
            @MoveUp.performed -= instance.OnMoveUp;
            @MoveUp.canceled -= instance.OnMoveUp;
            @MoveDown.started -= instance.OnMoveDown;
            @MoveDown.performed -= instance.OnMoveDown;
            @MoveDown.canceled -= instance.OnMoveDown;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="KeyboardActionActions.UnregisterCallbacks(IKeyboardActionActions)" />.
        /// </summary>
        /// <seealso cref="KeyboardActionActions.UnregisterCallbacks(IKeyboardActionActions)" />
        public void RemoveCallbacks(IKeyboardActionActions instance)
        {
            if (m_Wrapper.m_KeyboardActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="KeyboardActionActions.AddCallbacks(IKeyboardActionActions)" />
        /// <seealso cref="KeyboardActionActions.RemoveCallbacks(IKeyboardActionActions)" />
        /// <seealso cref="KeyboardActionActions.UnregisterCallbacks(IKeyboardActionActions)" />
        public void SetCallbacks(IKeyboardActionActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="KeyboardActionActions" /> instance referencing this action map.
    /// </summary>
    public KeyboardActionActions @KeyboardAction => new KeyboardActionActions(this);

    // SwipeAction
    private readonly InputActionMap m_SwipeAction;
    private List<ISwipeActionActions> m_SwipeActionActionsCallbackInterfaces = new List<ISwipeActionActions>();
    private readonly InputAction m_SwipeAction_MoveWithTouchScreen;
    private readonly InputAction m_SwipeAction_MoveWithMouse;
    /// <summary>
    /// Provides access to input actions defined in input action map "SwipeAction".
    /// </summary>
    public struct SwipeActionActions
    {
        private @GameInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SwipeActionActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SwipeAction/MoveWithTouchScreen".
        /// </summary>
        public InputAction @MoveWithTouchScreen => m_Wrapper.m_SwipeAction_MoveWithTouchScreen;
        /// <summary>
        /// Provides access to the underlying input action "SwipeAction/MoveWithMouse".
        /// </summary>
        public InputAction @MoveWithMouse => m_Wrapper.m_SwipeAction_MoveWithMouse;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SwipeAction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SwipeActionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SwipeActionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SwipeActionActions" />
        public void AddCallbacks(ISwipeActionActions instance)
        {
            if (instance == null || m_Wrapper.m_SwipeActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwipeActionActionsCallbackInterfaces.Add(instance);
            @MoveWithTouchScreen.started += instance.OnMoveWithTouchScreen;
            @MoveWithTouchScreen.performed += instance.OnMoveWithTouchScreen;
            @MoveWithTouchScreen.canceled += instance.OnMoveWithTouchScreen;
            @MoveWithMouse.started += instance.OnMoveWithMouse;
            @MoveWithMouse.performed += instance.OnMoveWithMouse;
            @MoveWithMouse.canceled += instance.OnMoveWithMouse;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SwipeActionActions" />
        private void UnregisterCallbacks(ISwipeActionActions instance)
        {
            @MoveWithTouchScreen.started -= instance.OnMoveWithTouchScreen;
            @MoveWithTouchScreen.performed -= instance.OnMoveWithTouchScreen;
            @MoveWithTouchScreen.canceled -= instance.OnMoveWithTouchScreen;
            @MoveWithMouse.started -= instance.OnMoveWithMouse;
            @MoveWithMouse.performed -= instance.OnMoveWithMouse;
            @MoveWithMouse.canceled -= instance.OnMoveWithMouse;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SwipeActionActions.UnregisterCallbacks(ISwipeActionActions)" />.
        /// </summary>
        /// <seealso cref="SwipeActionActions.UnregisterCallbacks(ISwipeActionActions)" />
        public void RemoveCallbacks(ISwipeActionActions instance)
        {
            if (m_Wrapper.m_SwipeActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SwipeActionActions.AddCallbacks(ISwipeActionActions)" />
        /// <seealso cref="SwipeActionActions.RemoveCallbacks(ISwipeActionActions)" />
        /// <seealso cref="SwipeActionActions.UnregisterCallbacks(ISwipeActionActions)" />
        public void SetCallbacks(ISwipeActionActions instance)
        {
            foreach (var item in m_Wrapper.m_SwipeActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwipeActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SwipeActionActions" /> instance referencing this action map.
    /// </summary>
    public SwipeActionActions @SwipeAction => new SwipeActionActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "KeyboardAction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="KeyboardActionActions.AddCallbacks(IKeyboardActionActions)" />
    /// <seealso cref="KeyboardActionActions.RemoveCallbacks(IKeyboardActionActions)" />
    public interface IKeyboardActionActions
    {
        /// <summary>
        /// Method invoked when associated input action "MoveUp" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveUp(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveRight(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SwipeAction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SwipeActionActions.AddCallbacks(ISwipeActionActions)" />
    /// <seealso cref="SwipeActionActions.RemoveCallbacks(ISwipeActionActions)" />
    public interface ISwipeActionActions
    {
        /// <summary>
        /// Method invoked when associated input action "MoveWithTouchScreen" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveWithTouchScreen(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveWithMouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveWithMouse(InputAction.CallbackContext context);
    }
}
